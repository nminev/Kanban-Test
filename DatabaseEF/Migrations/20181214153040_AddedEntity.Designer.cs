// <auto-generated />
using DatabaseEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseEF.Migrations
{
    [DbContext(typeof(KanbanContext))]
    [Migration("20181214153040_AddedEntity")]
    partial class AddedEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseEF.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("TaskID");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DatabaseEF.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("PersonOnItID");

                    b.HasKey("ID");

                    b.HasIndex("PersonOnItID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("DatabaseEF.Person", b =>
                {
                    b.HasOne("DatabaseEF.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DatabaseEF.Task", b =>
                {
                    b.HasOne("DatabaseEF.Person", "PersonOnIt")
                        .WithMany()
                        .HasForeignKey("PersonOnItID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
